> [Ref]. Assembly.GetType('System.Management.Automation.AmsiUtils')   #Gots catched by AV - Windows Event log 1116 and 1117  /Application and services Logs/Microsoft/Windows/Windows defender/ AMSI/Operational
> [Ref]. Assembly.GetType('System.Management.Automation.'+'Amsi'+'Utils')   #Evades AV

.SetValue($null,$true)  #AV finds as malicious, so we set value.
> $Value="SetValue"
> .SValue($null,$true)  #Now it works and AV is not notifyig about malicious content.

Junk code, code stops -- gibberish to decept code analysts. BTW junk code has to be added before compilation!

Obfuscate controls like if/else ; try/catch ; switch/case ; for/while

Object names - important, must obfuscate from AV signatures
Object names can differ 1.) Compiled language (C, C#) 2.) Interpreted language (like python or powershell) Incase of Interpreted languages ALL objects matter and must be obfuscated! But in compiled language - important objects to obfuscate are only the objects appearing into strings! So we only care about objects in strings!

Compilation modes:
  1.) Debug mode - analyst can obtain all the available global variables, all the samples and other program variations.
  2.) Release built - we remove all critical components, like symbol files. 

-----------------------
1.) Change all the names of variables, also delete all strings and all cout << "Buffer created"; - example, everything that gives any info and is not needed in program. Save code and then compile
2.) $ x86_64-w64-mingw32-g++ -o challenge-8.exe challenge-8.c    #obfuscate code compilation.
3.) $ strip --strip-all challenge-8.exe                          #stripping redundant symbols from the code.

Most well-designed websites and systems will check the MIME type or the actual content of the file being uploaded to ensure it matches the expected file type.

==============================================================================================
==============================================================================================
AV Evasion with shellcodes

Shellcode is written in machine code or assembly and converted to hex. Ultimate way to evade AV.

PE, portable executive, most of the time shellcode is injected in Data section on portable executive.

1.) PE Header - metadata about executable, pointers, links to addresses in memory.
2.) Data section - info required to run the program, info about windows loader (responsible to run the program), resourses to libraries or DLLs, variables. 
Data section may hold different types of data, sections like 
.text - holds actual code,
.data - holds all the variables,
.bss - hold uninitialized data or declared variables that dont have any data assigned to them,
.rdata - holds read only data,
.edata - holds exploitable or exportable objects and table information.
and there are many other sections.

Add PE file to "PE-bear" tool.
DOS Hdr - shows magic number
Optional Hdr - Entry Point
Fide Hdr - Section Count      #how many sections file have.
Section Hdr - #Custom section is used to store extra data. Malware developers use this technique to create a new section that contains malicious code. Right click on custom section and "Fowwol on click".

==============================================================================================
==============================================================================================
Staged and unstaged payloads using msfvenom (creates shellcodes)

Nonstaged or stageless payloads - They run one at the time so the shellcode and the payload are all one piece. So the payload is executed at victims pc and at the same time it executes shellcode. It doesnt require network, if we are dealing with firewalls and IDS systems etc - stageless are good to go. They are very GOOD on bypass IDS, IPS, because they dont make any connetion outside. 

Staged payloads - consist of two parts: 1.) dropper and 2.) shellcode
First thing dropper is executed on victim machine and then the dropper will download shellcode from our machine. 
Staged payloads are very GOOD to bypass ANTIVIRUS, because dropper doesnt have anything suspicious. And the shellcode is executed in memory, doesnt touch the disk!

To create shellcode with msfvenom, have to use:
  1.) encoding - main goal tranform data in suitable format (Transform image to Base64 to embed in html, UTF-8, ASCII, URL encoding)
  2.) encryption - AES, DES, RSA
  3.) Packers - used to compress and obfuscate executable files. The primary aim is to reduce the file size and/or make the code harder to analyze or reverse engineer. When the packed executable is run, it first unpacks or decompresses itself in memory, and then the original code is executed. UPX (Universal Packer for eXecutables) is a well-known packer. It can be used for both benign and malicious purposes. Are used to deceive analysts.
  4.) Binders - used to combine two or more executables into a single file. When the resulting bound file is executed, all the embedded executables are run, typically one after another. For instance, a benign-looking executable (like a game or utility) might be bound with a piece of malware. 


















